<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Configures on Hugo documentation theme</title><link>https://richg-github.github.io/docs.github.io/configure/</link><description>Recent content in Configures on Hugo documentation theme</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Designed by [Themefisher](https://themefisher.com) &amp; Developed by [Gethugothemes](https://gethugothemes.com)</copyright><atom:link href="https://richg-github.github.io/docs.github.io/configure/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://richg-github.github.io/docs.github.io/configure/application-logs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/application-logs/</guid><description>Application Logs for Flat File Configuration.. The application logs feature allows you to configure applications with functional APIs to automatically collect logs from multiple sources, using tag and topology-based asset scoping in the Alert Logic console. You can also copy an existing log configuration to create a new one, and edit it as necessary.
The log collection configuration is a streamlined workflow with specific application log templates. Log collection allows you to configure flat file logs, which are log messages stored in flat text files.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/application-registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/application-registry/</guid><description>Application Registry Application Registry provides an intuitive and efficient way to integrate multiple third-party applications that can generate logs. Application Registry is a repository of platform integrations in your Configuration group in the Alert Logic console. Integration with third-party applications adds administrative and security value to your organization. Application Registry is only available for Professional and EnterpriseManaged Detection and Response customers.
To access the Application Registry page, click the menu icon () from the Dashboards page.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/asset-groups/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/asset-groups/</guid><description>Asset Groups (Beta) This document is intended for early-access customers, and it is updated as Asset Group features are enhanced. The Asset Groups page, listed under Configure in the Alert Logic console, offers a consolidated view of all asset groups created in your account. You can create and manage asset groups from this page. An asset group is a user-defined set of assets that you want Alert Logic to act on in some way to increase the security of your environment.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/asset-groups/schema/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/asset-groups/schema/</guid><description>Asset Groups (Beta) Expression Reference This document is intended for early-access customers, and it is updated as Asset Group features are enhanced. If you want to create or edit your asset group manually with the Expression Editor (available from the Asset Groups page), you can refer to the asset groups expression schema, JSON field definitions, and list of eligible assets. Expression samples are also provided to help you get started.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/auth0-log-collector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/auth0-log-collector/</guid><description>Configure Auth0 Log Collector The Alert Logic Auth0 Collector is an AWS-based API Poll (PAWS) log collector library mechanism designed to collect logs from the Auth0 Identity and Access Management platform. You must complete a few tasks in the Auth0 management console, install the Auth0 collector using the Alert Logic CloudFormation template, and then complete the configuration process in the Alert Logic console to collect logs. You can find Auth0 logs collected with keyword search in the Alert Logic console.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/aws-security-hub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/aws-security-hub/</guid><description>Integration with AWS Security Hub Alert Logic is proud to announce its integration with Security Hub, a new product offered by Amazon Web Services (AWS). Security Hub is a dashboard within the AWS console where you can view findings generated by Alert Logic.
To start using the Alert Logic Security Hub integration, you must have an environment in AWS and a subscription to the Alert Logic suite at the Professional level or higher.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/certificates-keys/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/certificates-keys/</guid><description>Certificates and Keys If you have an Alert Logic MDR Professional or an Alert Logic MDR Enterprise subscription and administrative privileges to manage certificate and keys, you can upload certificates.
Access the Alert Logic Certificates and Keys page in the Alert Logic console. Click the Configure menu item, and then click Certificates and Keys.
Manage security certificates Upload security certificates Customers with administrative privileges can upload security certificates in the Alert Logic console.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/collectors/amazon-s3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/collectors/amazon-s3/</guid><description>Configure Amazon S3 Log Collector The Alert Logic Amazon S3 log collector is designed to collect Amazon Simple Storage Service (S3) logs delivered to an Amazon S3 bucket. You can find S3 logs collected with keyword search in the Alert Logic console Search: Log Messages page. Alert Logic also generates security incidents from Amazon S3 logs in the Incidents page. For more information about authentication application security content, see Authentication Application Security Incidents?</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/collectors/auth0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/collectors/auth0/</guid><description>Configure Auth0 Log Collector The Alert Logic Auth0 Collector is an AWS-based API Poll (PAWS) log collector library mechanism designed to collect logs from the Auth0 Identity and Access Management platform.
You can find Auth0 logs collected with keyword search in the Alert Logic console Search: Log Messages page. Alert Logic also generates security incidents from Auth0 logs in the Incidents page. For more information about authentication application security content, see Authentication Application Security Incidents.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/collectors/aws-cloudtrail/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/collectors/aws-cloudtrail/</guid><description>Configure Custom AWS CloudTrail Log Collector/Collection? This is the topic that will explain that CloudTrail is already configured if they set up their deployment with the correct permissions and how to check.
CloudTrail logs are automatically collected through the deployment role. To confirm that Alert Logic is collecting CloudTrail logs from your environment, click here. For more information about how Alert Logic automatically integrates with CloudTrail, see [About AWS CloudTrail and Alert Logic](.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/collectors/aws-workspaces/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/collectors/aws-workspaces/</guid><description>Configure Amazon WorkSpaces Collector You can deploy the Alert Logic agent to your Amazon WorkSpaces instances to collect logs and network traffic. To protect environments that use Amazon WorkSpaces, the required method is to deploy the Alert Logic agent on each that you want to protect. The Alert Logic agent enables collections of network traffic and log messages from each of the Amazon WorkSpaces instances. Collection of data is configured transparently for new and existing deployments.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/collectors/aws_network_firewall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/collectors/aws_network_firewall/</guid><description>Configure AWS Network Firewall Log Collector The Alert Logic Amazon Web Services (AWS) Network Firewall log collector is designed to collect AWS Network Firewall alerts delivered to an Amazon Simple Storage Service (S3) bucket. You can find AWS Network Firewall alerts collected with keyword search in the Alert Logic console Search: Log Messages page. The message type is &amp;ldquo;AWS Network Firewall Alert.&amp;rdquo; You can create correlations to generate incidents from these alerts.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/collectors/carbonblack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/collectors/carbonblack/</guid><description>Configure Carbon Black Log Collector The Alert Logic Carbon Black collector is an AWS-based API Poll (PAWS) log collector library mechanism designed to collect logs from the Carbon Black cloud. You can find Carbon Black logs collected with keyword search in the Alert Logic consoleSearch: Log Messages page. Alert Logic also generates security incidents from Carbon Black Endpoint Standard logs in the Endpoint Security Incidents page.
The steps to configure the Carbon Black collector depend on which API you want to collect from: Carbon Black Alerts API, Carbon Black Audit API, or both Carbon Black EDR and Endpoint Standard logs via an Amazon S3 bucket.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/collectors/ciscoamp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/collectors/ciscoamp/</guid><description>Configure Cisco AMP Log Collector The Alert Logic Cisco AMP Collector is an AWS-based API Poll (PAWS) log collector library mechanism designed to collect logs from the Cisco AMP service. You can find Cisco AMP logs collected with keyword search in the Alert Logic console Search: Log Messages page. Alert Logic also generates security incidents from Cisco AMP logs in the Incidents page.
The Alert Logic Cisco AMP collector polls AuditLogs and Events APIs.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/collectors/ciscoduo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/collectors/ciscoduo/</guid><description>Configure Cisco Duo Log Collector The Alert Logic Cisco Duo Collector is an AWS-based API Poll (PAWS) log collector library mechanism designed to collect logs from the Cisco Duo platform. You can find Cisco Duo logs collected with keyword search in the Alert Logic console Search: Log Messages page. Alert Logic also generates security incidents from Cisco Duo logs in the Incidents page. For more information about authentication application security content, see Authentication Application Security Incidents.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/collectors/crowdstrike/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/collectors/crowdstrike/</guid><description>Configure CrowdStrike Log Collector The Alert Logic CrowdStrike collector is an AWS-based API Poll (PAWS) log collector library mechanism designed to collect logs from the CrowdStrike platform.
To view logs collected by all CrowdStrike collectors in your environment, click [here](https://console.search.alertlogic.com/#/search/expert/10785703?aaid=10785703&amp;amp;amp;locid=defender-us-denver&amp;amp;amp;sql=SELECT%0A%20%20%20%20time_recv%20AS%20%22Time%20Received%22,%0A%20%20%20%20message%20AS%20%22Message%22,%0A%20%20%20%20application_id%20AS%20%22Application%20ID%22%0AFROM%20logmsgs%0AWHERE%20EXISTS(%20%22Message%22%20)%0A%20%20%20%20AND%0A%22Application%20ID%22%20IN%20%5B%20'',%20'crowdstrike'%20%5D%0AORDER%20BY%20%22Time%20Received%22%20DESC%0ALIMIT%201000&amp;amp;amp;mode=simple&amp;amp;amp;timeframe=3600). You can view logs collected by CrowdStrike collectors in the Search page in the Alert Logic console. To learn more about the Search feature, see [Get Started with Search](../../get-started/search-a.md). To learn how to create correlations to generate incidents or observations from the collected logs, see [Correlations and Notifications](.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/collectors/googlestackdriver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/collectors/googlestackdriver/</guid><description>Configure Google Cloud Platform Log Collector The Alert Logic Google Cloud Platform collector is an AWS-based API Poll (PAWS) log collector library mechanism designed to collect logs from the Google Cloud logs, formerly referred to as Stackdriver. You must generate a Google API, apply the permissions, and then complete the configuration process in the Alert Logic console.
Google Cloud logs do not have host metadata and are formatted in JSON. If you want to collect syslogs, you must use the Alert Logic agent to allow Alert Logic to process them.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/collectors/gsuite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/collectors/gsuite/</guid><description>Configure G Suite Log Collector The Alert Logic G Suite collector is an AWS-based API Poll (PAWS) log collector library mechanism designed to collect logs. You must complete tasks in G Suite and Google Cloud Platform, and then finish the configuration process in the Alert Logic console. The Alert Logic G Suite collector can collect from these specific G Suite applications:
Login Admin Access Transparency Calendar Drive Google Plus Token Groups Groups Enterprise Mobile Rules User Accounts A single Alert Logic G Suite collector can collect logs from any or all the content streams that you configure in the Alert Logic console.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/collectors/istio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/collectors/istio/</guid><description>Istio Support for Containers Alert Logic supports Istio for containers, which can virtually tap Istio-encrypted container-to-container traffic.
The Alert Logic Agent Container now includes an Istio detector to inspect the traffic between your containers. If you already have the agent container installed, no further action is necessary. If you do not have the agent container installed yet, go to Install the Alert Logic Agent Container
If you have a container environment but do not use Istio, the detector does not affect your environments.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/collectors/log-applications/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/collectors/log-applications/</guid><description>Log Collectors Configuration Guide Alert Logic offers integration with applications, including API-based integration with SaaS applications and passive log collecting through syslog forwarding with most firewall platforms. Available applications include products for authentication, productivity, management, and more. Alert Logic serves as a remote collector to receive log data from SaaS and firewall applications related to different incident types, depending on the product type.
The Application Registry provides an intuitive and efficient way to integrate multiple third-party applications that can generate logs.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/collectors/mimecast/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/collectors/mimecast/</guid><description>Configure Mimecast Log Collector The Alert Logic Mimecast collector is an AWS-based API Poll (PAWS) log collector library mechanism designed to collect logs from the Mimecast platform.
To view logs collected by all Mimecast collectors in your environment, click [here](https://console.search.alertlogic.com/#/search/expert/acting?mode=simple&amp;amp;amp;sql=SELECT%0A%20%20%20%20time_recv%20AS%20%22Time%20Received%22,%0A%20%20%20%20message%20AS%20%22Message%22%0AFROM%20logmsgs%0AWHERE%20application_id%20%3D%20%27Mimecast%27%0AORDER%20BY%20%22Time%20Received%22%20DESC%0ALIMIT%201000&amp;amp;amp;timeframe=3600). To learn more about the Search feature, see [Get Started with Search](../../get-started/search-a.md). To learn how to create correlations to generate incidents or observations from the collected logs, see [Correlations and Notifications](.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/collectors/o365/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/collectors/o365/</guid><description>Configure Microsoft Office 365 Log Collector The instructions in this document are for the Alert Logic Application Registry setup of the Microsoft Office 365 log collector. If you have to reference instructions or information for the older setup of the log collector, see Set Up Collection of Microsoft Office 365 Logs.
The Alert Logic Microsoft Office 365 collector is an AWS-based API Poll (PAWS) log collector library mechanism designed to collect logs.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/collectors/okta/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/collectors/okta/</guid><description>Configure Okta Log Collector The Alert Logic Okta Collector is an AWS-based API Poll (PAWS) log collector library mechanism designed to collect logs from the Okta platform. You can find Okta logs collected with keyword search in the Alert Logic console Search: Log Messages page. Alert Logic also generates security incidents from Okta logs in the Incidents page. For more information about authentication application security content, see Authentication Application Security Incidents.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/collectors/salesforce-log-collector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/collectors/salesforce-log-collector/</guid><description>Configure Salesforce Log Collector The Alert Logic Salesforce Collector is an AWS-based API Poll (PAWS) log collector library mechanism designed to collect logs from the Salesforce Customer relationship management (CRM) platform. You must complete the following to successfully configure your Salesforce Log Collector:
Set up Salesforce Create an Alert Logic access key Install the Salesforce collector from the CloudFormation template Configuring collection from the Alert Logic console You can find Salesforce logs collected with keyword search in the Alert Logic console.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/collectors/salesforce/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/collectors/salesforce/</guid><description>Configure Salesforce Log Collector The Alert Logic Salesforce Collector is an AWS-based API Poll (PAWS) log collector library mechanism designed to collect logs from the Salesforce Customer relationship management (CRM) platform.
You can find Salesforce logs collected with keyword search in the Alert Logic console Search: Log Messages page. Alert Logic also generates security incidents from Salesforce logs in the Incidents page. For more information about authentication application security content, see Authentication Application Security Incidents.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/collectors/sentinelone/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/collectors/sentinelone/</guid><description>Configure SentinelOne Log Collector The Alert Logic SentinelOne Collector is an AWS-based API Poll (PAWS) log collector library mechanism designed to collect logs from the SentinelOne platform. You can find SentinelOne logs collected with keyword search in the Alert Logic console Search: Log Messages page. Alert Logic also generates security incidents from SentinelOne logs in the Incidents page.
You must complete the following to successfully configure your SentinelOne Log Collector:</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/collectors/sophos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/collectors/sophos/</guid><description>Configure Sophos Log Collector The Alert Logic Sophos Collector is an AWS-based API Poll (PAWS) log collector library mechanism designed to collect logs from the Sophos service. You can find Sophos logs collected with keyword search in the Alert Logic console Search: Log Messages page. Alert Logic also generates security incidents from Sophos logs in the Incidents page.
The steps to configure the Sophos collector depend on which API you want to collect from: Common API or SIEM API.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors-beta/authorization-header/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors-beta/authorization-header/</guid><description>Generate an Authorization Header If the third-party application to which you want to connect requires a Basic HTTP Authorization request header, you can use these instructions to generate the header. The command requires the valid user name and password in the application to which you want to connect, and it encodes the credentials with base64.
In the Authorization Header field, you enter the word &amp;ldquo;Basic&amp;rdquo; (which is the Authorization header type), a space, and then the base64-encoded credentials.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors-beta/connection-targets/alapi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors-beta/connection-targets/alapi/</guid><description>Configure Alert Logic API Connection Target A Alert Logic API connection target securely stores reusable authentication credential and URL path information for integrations with Alert Logic API.
Complete the following steps to configure a connection target for Alert Logic API:
Generate an Alert Logic access key ID and secret key Use the connection target in playbooks Generate an Alert Logic access key ID and secret key For Alert Logic API connection targets, you must generate an access key ID and secret key.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors-beta/connection-targets/aws-iam-role/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors-beta/connection-targets/aws-iam-role/</guid><description>Configure AWS IAM Role Connection Target A AWS IAM Role connection target securely stores reusable authentication credential and URL path information for integrations with AWS IAM Role.
Complete the following steps to configure a connection target for AWS IAM Role:
Create an AWS IAM Role ARN Use the connection target in playbooks Create an AWS IAM Role ARN For Amazon Web Services (AWS) IAM Role connection targets, you must generate a Role ARN value.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors-beta/connection-targets/azure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors-beta/connection-targets/azure/</guid><description>Configure Microsoft Azure Connection Target (Beta) A Microsoft Azure connection target securely stores reusable authentication credential information for integrations with Microsoft Azure.
Complete the following steps to configure a connection target for Microsoft Azure:
Create an app registration in Azure Grant permission to perform actions in Azure Create a client secret in Azure Create the Microsoft Azure connection target from the Alert Logic console Use the connection target in automated response Create an app registration in Azure Create an app registration in Azure Active Directory to hold the permissions and credentials granted to Alert Logic.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors-beta/connection-targets/connection-target/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors-beta/connection-targets/connection-target/</guid><description>Connection Targets Configuration Guide (Beta) This document is intended for early-access customers, and it is updated as features are enhanced. Connection targets define common authentication path and credential references for external systems. Connection targets are stored securely and can be used by connectors and automated response workflows.
For more information on connectors, see Connectors Configuration Guide. For more information on automated response, see Get Started with Automated Response (Beta).
Ticketing Targets Configure a Jira Connection Target Configure Jira Service Desk Connection Target Configure ServiceNow Connection Target Configure Zendesk Connection Target Messaging Targets Configure Microsoft Teams Connection Target Configure Slack Connection Target Configure PagerDuty Connection Target Universal Targets breYep thaConfigure Universal Webhook Connection Target API Targets Configure Alert Logic API Connection Target Configure AWS IAM Role Connection Target Endpoint Detection and Response Configure Microsoft Azure Connection Target (Beta)</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors-beta/connection-targets/jira/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors-beta/connection-targets/jira/</guid><description>Configure a Jira Connection Target A Jira connection target securely stores reusable authentication credential and URL path information for integrations with Jira.
Complete the following steps to configure a connection target for Jira:
Identify your Jira base target URL Create an Atlassian API token Generate an Authorization header (Optional) Add custom header(s) Use the connection target in connectors and playbooks Identify your Jira base target URL Identify your Jira instance name.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors-beta/connection-targets/jsd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors-beta/connection-targets/jsd/</guid><description>Configure Jira Service Desk Connection Target A Jira Service Desk connection target securely stores reusable authentication credential and URL path information for integrations with Jira Service Desk.
Complete the following steps to configure a connection target for Jira Service Desk:
Identify your Jira Service Desk base target URL Create an Atlassian API token Generate an Authorization header Add custom header(s) Use the connection target in connectors and playbooks Identify your Jira Service Desk base target URL Identify your Jira Service Desk instance name.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors-beta/connection-targets/manage-connection-targets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors-beta/connection-targets/manage-connection-targets/</guid><description>Manage Connection Targets The Connection Targets page, under Configure in the Alert Logic console, lists all connection targets created in your account. You can create and manage connection targets of all types from this page.
Create a connection target You can create connection targets of all types from the Connection Targets page. Click the add icon (), and then choose the type of connection target.
Application requirements vary and often require different information.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors-beta/connection-targets/pagerduty/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors-beta/connection-targets/pagerduty/</guid><description>Configure PagerDuty Connection Target A PagerDuty connection target securely stores reusable authentication credential and URL path information for integrations with PagerDuty.
Complete the following steps to configure a connection target for PagerDuty:
Generate your PagerDuty routing key Use the connection target in connectors and playbooks Generate your PagerDuty routing key To generate the PagerDuty integration service routing key, see the PagerDuty documentation.
Create the PagerDuty connection target from the Alert Logic console In the Alert Logic console, click the navigation menu icon (), click Configure, and then click Connectors.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors-beta/connection-targets/servicenow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors-beta/connection-targets/servicenow/</guid><description>Configure ServiceNow Connection Target A ServiceNow connection target securely stores reusable authentication credential and URL path information for integrations with ServiceNow.
Complete the following steps to configure a connection target for ServiceNow:
Identify your ServiceNow base target URL Generate an Authorization header Add custom header(s) Use the connection target in connectors and playbooks Identify your ServiceNow base target URL Identify your ServiceNow instance name. In the Base URL field, you must replace &amp;ldquo;&amp;rdquo; in the default URL provided in the Alert Logic console with the ServiceNow instance you want to target.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors-beta/connection-targets/slack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors-beta/connection-targets/slack/</guid><description>Configure Slack Connection Target A Slack connection target securely stores reusable authentication credential and URL path information for integrations with Slack.
Complete the following steps to configure a connection target for Slack:
Configure Slack Connection Target Use the connection target in connectors and playbooks Generate your Slack base target URL The base URL for Slack connection targets must be generated from Slack .To generate the base target URL, complete the instructions in the Slack documentation.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors-beta/connection-targets/teams/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors-beta/connection-targets/teams/</guid><description>Configure Microsoft Teams Connection Target A Microsoft Teams connection target securely stores reusable authentication credential and URL path information for integrations with Microsoft Teams.
Complete the following steps to configure a connection target for Microsoft Teams:
Generate your Teams base target URL Use the connection target in connectors and playbooks Generate your Teams base target URL The base URL for Microsoft Teams connection targets must be generated from Teams. To generate the base target URL, complete the instructions in the Microsoft Teams documentation.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors-beta/connection-targets/webhook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors-beta/connection-targets/webhook/</guid><description>breYep thaConfigure Universal Webhook Connection Target A webhook connection target securely stores reusable authentication credential and URL path information for integrations with webhook.
Complete the following steps to configure a connection target for webhook:
Complete the following steps to successfully configure a connection target for a Webhook:
Identify your webhook base URL target
breYep thaConfigure Universal Webhook Connection Target
(Optional) Add custom header(s)
Use the connection target in connectors and playbooks</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors-beta/connection-targets/zendesk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors-beta/connection-targets/zendesk/</guid><description>Configure Zendesk Connection Target A Zendesk connection target securely stores reusable authentication credential and URL path information for integrations with Zendesk.
Complete the following steps to configure a connection target for Zendesk:
Identify your Zendesk subdomain name Create a Zendesk API token Use the connection target in connectors and playbooks Identify your Zendesk subdomain name Identify your Zendesk instance name. In the Base URL field, you must replace &amp;ldquo;&amp;rdquo; in the default URL provided in the Alert Logic console with the Zendesk instance you want to target.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors-beta/connectors-targets-beta-landing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors-beta/connectors-targets-beta-landing/</guid><description>Connectors and Connection Targets Resources (Beta) This document is intended for early-access customers, and it is updated as features are enhanced. The Alert Logic console is presenting a new tab under configure, connection targets. Connection targets are the authentication URL and credentials used for 3rd party integrations.
The URL path and credential fields in the old connectors configuration are now found in the Connection Targets configuration. In the connectors configuration, you will now select a reusable connection target to set basic URL, credential, and header parameters.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors-beta/connectors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors-beta/connectors/</guid><description>Connectors Configuration Guide (Beta) This document is intended for early-access customers, and it is updated as features are enhanced. You can configure a connector in the Alert Logic console to send notifications to any public-facing HTTP endpoint. Connectors allow you to send security data directly to a third-party application in near real time. When you set up a notification and subscribe a webhook or email connector, the connector sends the event to the target URL or email address you configured and can generate a message or IT service management (ITSM) ticket automatically.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors-beta/email/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors-beta/email/</guid><description>Configure a Universal Email Connector You can configure a universal email connector in the Alert Logic console to send incident notifications to any public-facing web server configured to accept email requests. Email connectors allow you to send notifications about threats or changes in your environment directly to a third-party application in near real time so you can respond quickly.
When you set up a notification and subscribe an email connector, the connector sends the event to the target email you configured and can generate a message or IT service management (ITSM) ticket for the incident automatically.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors-beta/incident/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors-beta/incident/</guid><description>Incident Schema You can refer to this incident schema to configure the payload template for a third-party webhook connector.
Schema JSON
| 1 | { | | 2 | &amp;ldquo;accountId&amp;rdquo;: number, | | 3 | &amp;ldquo;asset_deployment_type&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 4 | &amp;ldquo;asset_host_name&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 5 | &amp;ldquo;asset_native_account_id&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 6 | &amp;ldquo;assets&amp;rdquo;: {}, | | 7 | &amp;ldquo;attacker&amp;rdquo;: { | | 8 | &amp;ldquo;account&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 9 | &amp;ldquo;instanceId&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 10 | &amp;ldquo;ip&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 11 | &amp;ldquo;port&amp;rdquo;: number, | | 12 | &amp;ldquo;region&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 13 | }, | | 14 | &amp;ldquo;attacker_country_code&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 15 | &amp;ldquo;attacker_country_name&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 16 | &amp;ldquo;attacker_lset&amp;rdquo;: [ | | 17 | { | | 18 | &amp;ldquo;ip&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 19 | }, | | 20 | { | | 21 | &amp;ldquo;value&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 22 | } | | 23 | ], | | 24 | &amp;ldquo;closed_time&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 25 | &amp;ldquo;correlation_id&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 26 | &amp;ldquo;correlation_name&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 27 | &amp;ldquo;createTime&amp;rdquo;: number, | | 28 | &amp;ldquo;createtime_str&amp;rdquo;: &amp;ldquo;string, | | 29 | &amp;ldquo;customer&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 30 | &amp;ldquo;customer_feedback&amp;rdquo;: { | | 31 | &amp;ldquo;feedback&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 32 | &amp;ldquo;feedback_datetime&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 33 | &amp;ldquo;feedback_reason&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 34 | &amp;ldquo;feedback_uid&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 35 | &amp;ldquo;feedback_user&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 36 | }, | | 37 | &amp;ldquo;customer_status&amp;rdquo;: { | | 38 | &amp;ldquo;notes&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 39 | &amp;ldquo;reason_code&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 40 | &amp;ldquo;status&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 41 | &amp;ldquo;status_change_time&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 42 | }, | | 43 | &amp;ldquo;customer_status_status&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 44 | &amp;ldquo;defaultThreatRating&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 45 | &amp;ldquo;deployment,&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 46 | &amp;ldquo;deployment_subnet&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 47 | &amp;ldquo;deployment_vpc&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 48 | &amp;ldquo;detection_source&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 49 | &amp;ldquo;first_closed_time&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 50 | &amp;ldquo;geo_ip_map&amp;rdquo;: { | | 51 | &amp;ldquo;string&amp;rdquo;: { | | 52 | &amp;ldquo;city&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 53 | &amp;ldquo;continentcode&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 54 | &amp;ldquo;country&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 55 | &amp;ldquo;countryname&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 56 | &amp;ldquo;ip&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 57 | &amp;ldquo;latitude&amp;rdquo;: number, | | 58 | &amp;ldquo;longitude&amp;rdquo;: number, | | 59 | &amp;ldquo;postcode&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 60 | &amp;ldquo;regioncode&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 61 | &amp;ldquo;regionname&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 62 | } | | 63 | }, | | 64 | &amp;ldquo;humanFriendlyId&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 65 | &amp;ldquo;incident&amp;rdquo;: { | | 66 | &amp;ldquo;attackClassId&amp;rdquo;: number, | | 67 | &amp;ldquo;attackClassId_str&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 68 | &amp;ldquo;description&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 69 | &amp;ldquo;escalated&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 70 | &amp;ldquo;recommendations&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 71 | &amp;ldquo;summary&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 72 | &amp;ldquo;threatRating&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 73 | }, | | 74 | &amp;ldquo;incidentId&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 75 | &amp;ldquo;incident_attack_class&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 76 | &amp;ldquo;incident_class&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 77 | &amp;ldquo;incident_escalated&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 78 | &amp;ldquo;incident_threat_rating&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 79 | &amp;ldquo;incident_type&amp;rdquo;: string, | | 80 | &amp;ldquo;notes&amp;rdquo;: { | | 81 | &amp;ldquo;otherNotes&amp;rdquo;: [ | | 82 | { | | 83 | &amp;ldquo;date&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 84 | &amp;ldquo;note&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 85 | &amp;ldquo;who&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 86 | } | | 87 | ] | | 88 | }, | | 89 | &amp;ldquo;path&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 90 | &amp;ldquo;recommendations&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 91 | &amp;ldquo;scope_type&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 92 | &amp;ldquo;snooze_status&amp;rdquo;: { | | 93 | &amp;ldquo;expiration&amp;rdquo;: number, | | 94 | &amp;ldquo;expiration_str&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 95 | &amp;ldquo;notes&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 96 | &amp;ldquo;period_ms&amp;rdquo;: number, | | 97 | &amp;ldquo;reactivates_at&amp;rdquo;: string, | | 98 | &amp;ldquo;reason_code&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 99 | &amp;ldquo;snooze_by&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 100 | &amp;ldquo;snooze_by_uid&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 101 | &amp;ldquo;snoozed&amp;rdquo;: boolean | | 102 | }, | | 103 | &amp;ldquo;snooze_status_snoozed&amp;rdquo;: false, | | 104 | &amp;ldquo;sources&amp;rdquo;: [ | | 105 | &amp;ldquo;string&amp;rdquo; | | 106 | ], | | 107 | &amp;ldquo;stack_region&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 108 | &amp;ldquo;updateTime&amp;rdquo;: number, | | 109 | &amp;ldquo;updatetime_str&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 110 | &amp;ldquo;victim&amp;rdquo;: { | | 111 | &amp;ldquo;value&amp;rdquo;: &amp;ldquo;[&amp;lsquo;string&amp;rsquo;]&amp;rdquo; | | 112 | }, | | 113 | &amp;ldquo;victim_lset&amp;rdquo;: [ | | 114 | { | | 115 | &amp;ldquo;value&amp;rdquo;: &amp;ldquo;[&amp;lsquo;string&amp;rsquo;]&amp;rdquo; | | 116 | } | | 117 | ], | | 118 | &amp;ldquo;extra&amp;rdquo;: { | | 119 | &amp;ldquo;incidentUrl&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 120 | &amp;ldquo;class&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 121 | &amp;ldquo;analyst_notes&amp;rdquo;: [{ | | 122 | &amp;ldquo;date&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 123 | &amp;ldquo;note&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 124 | }], | | 125 | &amp;ldquo;status&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 126 | &amp;ldquo;tld&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 127 | &amp;ldquo;is_escalated&amp;rdquo;: boolean, | | 128 | &amp;ldquo;investigation_report&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 129 | &amp;ldquo;recommendations&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 130 | &amp;ldquo;location_ip&amp;rdquo;: [&amp;ldquo;string&amp;rdquo;], | | 131 | &amp;ldquo;target_host&amp;rdquo;: [&amp;ldquo;string&amp;rdquo;] | | 132 | } | | 133 | } |</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors-beta/jira/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors-beta/jira/</guid><description>Configure Jira Webhook Connector You can configure a webhook connector in the Alert Logic console to send notifications to Jira in near real time. When you set up a notification and subscribe a webhook connector, the connector sends the event to the target URL you configured and generates an issue in Jira automatically.
Alert Logic notifications alert you to threats, changes, and scheduled events in your environment so you can respond quickly.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors-beta/jsd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors-beta/jsd/</guid><description>Configure Jira Service Desk Webhook Connector You can configure a webhook connector in the Alert Logic console to send notifications to Jira Service Desk in near real time. When you set up a notification and subscribe a webhook connector, the connector sends the event to the target URL you configured and generates a service desk request in Jira Service Desk automatically.
Alert Logic notifications alert you to threats, changes, and scheduled events in your environment so you can respond quickly.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors-beta/manage-connectors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors-beta/manage-connectors/</guid><description>Manage Connectors The Connectors page, listed under Configure in the Alert Logic console, offers a consolidated view of your connectors to third-party applications. The list includes all connectors created in your account. You can create and manage connectors of all types from this page.
Connectors increase efficiency and reduce response times. You can subscribe them to receive security notifications or generate service tickets automatically. For more information about connectors, see Webhook and Email Connectors.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors-beta/observation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors-beta/observation/</guid><description>Observation Schema You can refer to this observation schema to configure the payload template for a third-party webhook connector.
Alert Logic generates an observation when it detects an occurrence of a log correlation rule. For more information, see Correlations and Notifications.
Schema JSON
| 1 | { | | 2 | &amp;ldquo;fields&amp;rdquo;: { | | 3 | &amp;ldquo;authority&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 4 | &amp;ldquo;class&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 5 | &amp;ldquo;confidence&amp;rdquo;: number, | | 6 | &amp;ldquo;desc&amp;rdquo;: &amp;ldquo;string, | | 7 | &amp;ldquo;end_ts&amp;rdquo;: number, | | 8 | &amp;ldquo;ingest_id&amp;rdquo;: &amp;ldquo;binary&amp;rdquo;, | | 9 | &amp;ldquo;ingest_ts&amp;rdquo;: number, | | 10 | &amp;ldquo;keys&amp;rdquo;: { | | 11 | &amp;ldquo;message&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 12 | &amp;ldquo;time_recv&amp;rdquo;: number | | 13 | }, | | 14 | &amp;ldquo;parents&amp;rdquo;: [ | | 15 | &amp;ldquo;string&amp;rdquo; | | 16 | ], | | 17 | &amp;ldquo;path&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 18 | &amp;ldquo;properties&amp;rdquo;: {}, | | 19 | &amp;ldquo;recommendations&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 20 | &amp;ldquo;severity&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 21 | &amp;ldquo;start_ts&amp;rdquo;: number, | | 22 | &amp;ldquo;subclass&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 23 | &amp;ldquo;summary&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 24 | &amp;ldquo;tactic&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 25 | &amp;ldquo;technique&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 26 | &amp;ldquo;ts&amp;rdquo;: number, | | 27 | &amp;ldquo;visibility&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 28 | }, | | 29 | &amp;ldquo;id&amp;rdquo;: { | | 30 | &amp;ldquo;account&amp;rdquo;: number, | | 31 | &amp;ldquo;aid&amp;rdquo;: number, | | 32 | &amp;ldquo;msgid&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 33 | }, | | 34 | &amp;ldquo;extra&amp;rdquo;: { | | 35 | &amp;ldquo;customer_name&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 36 | &amp;ldquo;observation_description&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 37 | &amp;ldquo;correlation_rule_id&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 38 | &amp;ldquo;correlation_rule_name&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 39 | &amp;ldquo;observation_id&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 40 | &amp;ldquo;deployment_name&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 41 | &amp;ldquo;tld&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 42 | } | | 43 | } |</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors-beta/pagerduty/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors-beta/pagerduty/</guid><description>Configure PagerDuty Webhook Connector You can configure a webhook connector in the Alert Logic console to send notifications to PagerDuty in near real time. When you set up a notification and subscribe a webhook connector, the connector sends the event to the target URL you configured and creates a message in PagerDuty automatically.
Alert Logic notifications alert you to threats, changes, and scheduled events in your environment so you can respond quickly.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors-beta/payloads/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors-beta/payloads/</guid><description>Alert Logic Payloads You can use the following annotated payload JSON to customize the payload templates for third-party webhook connectors.
Incident JSON payload Observation JSON payload Scheduled Report JSON payload Scheduled FIM Search JSON payload Incident JSON payload This code is the incident JSON that Alert Logic generates. Configure your webhook payload template using the JSON output and descriptions below:
Old Incident JSON
| 1 | { | | 2 | &amp;ldquo;accountId&amp;rdquo;: 68530684, | | 3 | &amp;ldquo;all_assets&amp;rdquo;: [], | | 4 | &amp;ldquo;apex&amp;rdquo;: true, | | 5 | &amp;ldquo;appliance_info&amp;rdquo;: [], | | 6 | &amp;ldquo;appliance_ip_set&amp;rdquo;: [ | | 7 | { | | 8 | &amp;ldquo;appliance_id&amp;rdquo;: &amp;ldquo;2EEBAFAF-88DF-1005-ADBA-005056B03F5C&amp;rdquo;, | | 9 | &amp;ldquo;match_host_uuid&amp;rdquo;: false, | | 10 | &amp;ldquo;private_ips&amp;rdquo;: [ | | 11 | &amp;ldquo;172.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors-beta/scheduled-report-notification-payload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors-beta/scheduled-report-notification-payload/</guid><description>Scheduled Report Notification Schema You can refer to this scheduled report notification schema to configure the payload template for a third-party webhook connector.
Schema JSON
| 1 | { | | 2 | &amp;ldquo;type&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 3 | &amp;ldquo;status&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 4 | &amp;ldquo;scheduled_time&amp;rdquo;: number, | | 5 | &amp;ldquo;schedule_id&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 6 | &amp;ldquo;schedule&amp;rdquo;: { | | 7 | &amp;ldquo;daily&amp;rdquo;: { | | 8 | &amp;ldquo;hour&amp;rdquo;: number, | | 9 | &amp;ldquo;minute&amp;rdquo;: number | | 10 | } | | 11 | }, | | 12 | &amp;ldquo;run_once&amp;rdquo;: boolean, | | 13 | &amp;ldquo;published&amp;rdquo;: boolean, | | 14 | &amp;ldquo;publish_result&amp;rdquo;: { | | 15 | &amp;ldquo;timestamp&amp;rdquo;: number, | | 16 | &amp;ldquo;status&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 17 | }, | | 18 | &amp;ldquo;notify_behavior&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 19 | &amp;ldquo;name&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 20 | &amp;ldquo;modified&amp;rdquo;: { | | 21 | &amp;ldquo;by&amp;rdquo;: string, | | 22 | &amp;ldquo;at&amp;rdquo;: number | | 23 | }, | | 24 | &amp;ldquo;id&amp;rdquo;: string, | | 25 | &amp;ldquo;delete_empty_result&amp;rdquo;: boolean, | | 26 | }, | | 27 | &amp;ldquo;created&amp;rdquo;: { | | 28 | &amp;ldquo;by&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 29 | &amp;ldquo;at&amp;rdquo;: number | | 30 | }, | | 31 | &amp;ldquo;artifact_data&amp;rdquo;: { | | 32 | &amp;ldquo;result_id&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 33 | &amp;ldquo;result_count&amp;rdquo;: number, | | 34 | &amp;ldquo;metadata&amp;rdquo;: { | | 35 | &amp;ldquo;scheduled_report_name&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 36 | &amp;ldquo;schedule_id&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 37 | &amp;ldquo;result_count&amp;rdquo;: number, | | 38 | &amp;ldquo;report_type&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 39 | &amp;ldquo;report_id&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 40 | &amp;ldquo;report_description&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 41 | &amp;ldquo;customer_name&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 42 | &amp;ldquo;cadence&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 43 | &amp;ldquo;artifact_create_date&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 44 | }, | | 45 | &amp;ldquo;create_time&amp;rdquo;: number, | | 46 | &amp;ldquo;attachments&amp;rdquo;: [ | | 47 | { | | 48 | &amp;ldquo;url&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 49 | &amp;ldquo;name&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 50 | } | | 51 | ] | | 52 | }, | | 53 | &amp;ldquo;account_id&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 54 | &amp;ldquo;extra&amp;rdquo;: { | | 55 | &amp;ldquo;tld&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 56 | &amp;ldquo;ui_url&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 57 | &amp;ldquo;download_url&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 58 | } | | 59 | } |</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors-beta/servicenow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors-beta/servicenow/</guid><description>Configure ServiceNow Webhook Connector You can configure a webhook connector in the Alert Logic console to send notifications to ServiceNow in near real time. When you set up a notification and subscribe a webhook connector, the connector sends the event to the target URL you configured and generates a service ticket in ServiceNow automatically.
Alert Logic notifications alert you to threats, changes, and scheduled events in your environment so you can respond quickly.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors-beta/slack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors-beta/slack/</guid><description>Configure Slack Webhook Connector You can configure a webhook connector in the Alert Logic console to send notifications to Slack in near real time. When you set up a notification and subscribe a webhook connector, the connector sends the event to the target URL you configured and creates a message in Slack automatically.
Alert Logic notifications alert you to threats, changes, and scheduled events in your environment so you can respond quickly.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors-beta/teams/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors-beta/teams/</guid><description>Configure Microsoft Teams Webhook Connector You can configure a webhook connector in the Alert Logic console to send notifications to Microsoft Teams in near real time. When you set up a notification and subscribe a webhook connector, the connector sends the event to the target URL you configured and creates a message in Microsoft Teams automatically.
Alert Logic notifications alert you to threats, changes, and scheduled events in your environment so you can respond quickly.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors-beta/webhooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors-beta/webhooks/</guid><description>Configure a Universal Webhook Connector You can configure a universal webhook connector in the Alert Logic console to send notifications to any public-facing HTTP endpoint. Connectors allow you to send data directly to a third-party application in near real time. When you set up a notification and subscribe a webhook connector, the connector sends the event to the target URL you configured and can generate a message or service ticket automatically.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors-beta/zscratch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors-beta/zscratch/</guid><description>Notes/scraps
Language for app-specific: prepopulated with required information, predefined content
Major questions that need to be socialized in the next scrum of scrums:
Are we doing the base64 encoding for the Authorization header or do we need it to already be encoded for us by the customer? It would be friendlier and likely result in fewer support calls if we handle the encoding. Preferred approach is to add fields to get the needed components, and then we should build the Authorization header.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors/</guid><description>Webhook and Email Connectors You can configure a connector in the Alert Logic console to send notifications to any public-facing HTTP endpoint. Connectors allow you to send security data directly to a third-party application in near real time. When you set up a notification and subscribe a webhook or email connector, the connector sends the event to the target URL (as an HTTP POST request) or email address you configured and can send a message or generate an IT service management (ITSM) ticket automatically.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors/authorization-header/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors/authorization-header/</guid><description>Generate an Authorization Header If the third-party application to which you want to connect requires a Basic HTTP Authorization request header, you can use these instructions to generate the header. The command requires the valid user name and password in the application to which you want to connect, and it encodes the credentials with base64.
In the Authorization Header field, you enter the word &amp;ldquo;Basic&amp;rdquo; (which is the Authorization header type), a space, and then the base64-encoded credentials.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors/connectors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors/connectors/</guid><description>Connectors Configuration Guide You can configure a connector in the Alert Logic console to send notifications to any public-facing HTTP endpoint. Connectors allow you to send security data directly to a third-party application in near real time. When you set up a notification and subscribe a webhook or email connector, the connector sends the event to the target URL or email address you configured and can generate a message or IT service management (ITSM) ticket automatically.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors/email/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors/email/</guid><description>Configure a Universal Email Connector You can configure a universal email connector in the Alert Logic console to send incident notifications to any public-facing web server configured to accept email requests. Email connectors allow you to send notifications about threats or changes in your environment directly to a third-party application in near real time so you can respond quickly.
When you set up a notification and subscribe an email connector, the connector sends the event to the target email you configured and can generate a message or IT service management (ITSM) ticket for the incident automatically.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors/health/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors/health/</guid><description>Health Schema You can refer to this health schema to configure the payload template for a third-party webhook connector.
Schema JSON
| 1 | { | | 2 | &amp;ldquo;cid&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 3 | &amp;ldquo;report_description&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 4 | &amp;ldquo;exposure_impact&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 5 | &amp;ldquo;remediation_id&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 6 | &amp;ldquo;customer_account_name&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 7 | &amp;ldquo;deployment_name&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 8 | &amp;ldquo;target_asset_type&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 9 | } |</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors/incident/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors/incident/</guid><description>Incident Schema You can refer to this incident schema to configure the payload template for a third-party webhook connector.
Schema JSON
| 1 | { | | 2 | &amp;ldquo;accountId&amp;rdquo;: number, | | 3 | &amp;ldquo;asset_deployment_type&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 4 | &amp;ldquo;asset_host_name&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 5 | &amp;ldquo;asset_native_account_id&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 6 | &amp;ldquo;assets&amp;rdquo;: {}, | | 7 | &amp;ldquo;attacker&amp;rdquo;: { | | 8 | &amp;ldquo;account&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 9 | &amp;ldquo;instanceId&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 10 | &amp;ldquo;ip&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 11 | &amp;ldquo;port&amp;rdquo;: number, | | 12 | &amp;ldquo;region&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 13 | }, | | 14 | &amp;ldquo;attacker_country_code&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 15 | &amp;ldquo;attacker_country_name&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 16 | &amp;ldquo;attacker_lset&amp;rdquo;: [ | | 17 | { | | 18 | &amp;ldquo;ip&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 19 | }, | | 20 | { | | 21 | &amp;ldquo;value&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 22 | } | | 23 | ], | | 24 | &amp;ldquo;closed_time&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 25 | &amp;ldquo;correlation_id&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 26 | &amp;ldquo;correlation_name&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 27 | &amp;ldquo;createTime&amp;rdquo;: number, | | 28 | &amp;ldquo;createtime_str&amp;rdquo;: &amp;ldquo;string, | | 29 | &amp;ldquo;customer&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 30 | &amp;ldquo;customer_feedback&amp;rdquo;: { | | 31 | &amp;ldquo;feedback&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 32 | &amp;ldquo;feedback_datetime&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 33 | &amp;ldquo;feedback_reason&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 34 | &amp;ldquo;feedback_uid&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 35 | &amp;ldquo;feedback_user&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 36 | }, | | 37 | &amp;ldquo;customer_status&amp;rdquo;: { | | 38 | &amp;ldquo;notes&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 39 | &amp;ldquo;reason_code&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 40 | &amp;ldquo;status&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 41 | &amp;ldquo;status_change_time&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 42 | }, | | 43 | &amp;ldquo;customer_status_status&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 44 | &amp;ldquo;defaultThreatRating&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 45 | &amp;ldquo;deployment,&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 46 | &amp;ldquo;deployment_subnet&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 47 | &amp;ldquo;deployment_vpc&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 48 | &amp;ldquo;detection_source&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 49 | &amp;ldquo;first_closed_time&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 50 | &amp;ldquo;geo_ip_map&amp;rdquo;: { | | 51 | &amp;ldquo;string&amp;rdquo;: { | | 52 | &amp;ldquo;city&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 53 | &amp;ldquo;continentcode&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 54 | &amp;ldquo;country&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 55 | &amp;ldquo;countryname&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 56 | &amp;ldquo;ip&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 57 | &amp;ldquo;latitude&amp;rdquo;: number, | | 58 | &amp;ldquo;longitude&amp;rdquo;: number, | | 59 | &amp;ldquo;postcode&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 60 | &amp;ldquo;regioncode&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 61 | &amp;ldquo;regionname&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 62 | } | | 63 | }, | | 64 | &amp;ldquo;humanFriendlyId&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 65 | &amp;ldquo;incident&amp;rdquo;: { | | 66 | &amp;ldquo;attackClassId&amp;rdquo;: number, | | 67 | &amp;ldquo;attackClassId_str&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 68 | &amp;ldquo;description&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 69 | &amp;ldquo;escalated&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 70 | &amp;ldquo;recommendations&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 71 | &amp;ldquo;summary&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 72 | &amp;ldquo;threatRating&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 73 | }, | | 74 | &amp;ldquo;incidentId&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 75 | &amp;ldquo;incident_attack_class&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 76 | &amp;ldquo;incident_class&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 77 | &amp;ldquo;incident_escalated&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 78 | &amp;ldquo;incident_threat_rating&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 79 | &amp;ldquo;incident_type&amp;rdquo;: string, | | 80 | &amp;ldquo;notes&amp;rdquo;: { | | 81 | &amp;ldquo;otherNotes&amp;rdquo;: [ | | 82 | { | | 83 | &amp;ldquo;date&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 84 | &amp;ldquo;note&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 85 | &amp;ldquo;who&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 86 | } | | 87 | ] | | 88 | }, | | 89 | &amp;ldquo;path&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 90 | &amp;ldquo;recommendations&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 91 | &amp;ldquo;scope_type&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 92 | &amp;ldquo;snooze_status&amp;rdquo;: { | | 93 | &amp;ldquo;expiration&amp;rdquo;: number, | | 94 | &amp;ldquo;expiration_str&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 95 | &amp;ldquo;notes&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 96 | &amp;ldquo;period_ms&amp;rdquo;: number, | | 97 | &amp;ldquo;reactivates_at&amp;rdquo;: string, | | 98 | &amp;ldquo;reason_code&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 99 | &amp;ldquo;snooze_by&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 100 | &amp;ldquo;snooze_by_uid&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 101 | &amp;ldquo;snoozed&amp;rdquo;: boolean | | 102 | }, | | 103 | &amp;ldquo;snooze_status_snoozed&amp;rdquo;: false, | | 104 | &amp;ldquo;sources&amp;rdquo;: [ | | 105 | &amp;ldquo;string&amp;rdquo; | | 106 | ], | | 107 | &amp;ldquo;stack_region&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 108 | &amp;ldquo;updateTime&amp;rdquo;: number, | | 109 | &amp;ldquo;updatetime_str&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 110 | &amp;ldquo;victim&amp;rdquo;: { | | 111 | &amp;ldquo;value&amp;rdquo;: &amp;ldquo;[&amp;lsquo;string&amp;rsquo;]&amp;rdquo; | | 112 | }, | | 113 | &amp;ldquo;victim_lset&amp;rdquo;: [ | | 114 | { | | 115 | &amp;ldquo;value&amp;rdquo;: &amp;ldquo;[&amp;lsquo;string&amp;rsquo;]&amp;rdquo; | | 116 | } | | 117 | ], | | 118 | &amp;ldquo;extra&amp;rdquo;: { | | 119 | &amp;ldquo;incidentUrl&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 120 | &amp;ldquo;class&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 121 | &amp;ldquo;analyst_notes&amp;rdquo;: [{ | | 122 | &amp;ldquo;date&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 123 | &amp;ldquo;note&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 124 | }], | | 125 | &amp;ldquo;status&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 126 | &amp;ldquo;tld&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 127 | &amp;ldquo;is_escalated&amp;rdquo;: boolean, | | 128 | &amp;ldquo;investigation_report&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 129 | &amp;ldquo;recommendations&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 130 | &amp;ldquo;location_ip&amp;rdquo;: [&amp;ldquo;string&amp;rdquo;], | | 131 | &amp;ldquo;target_host&amp;rdquo;: [&amp;ldquo;string&amp;rdquo;] | | 132 | } | | 133 | } |</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors/jira/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors/jira/</guid><description>Configure Jira Webhook Connector You can configure a webhook connector in the Alert Logic console to send notifications to Jira in near real time. When you set up a notification and subscribe a webhook connector, the connector sends the event to the target URL you configured and generates an issue in Jira automatically.
Alert Logic notifications alert you to threats, changes, and scheduled events in your environment so you can respond quickly.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors/jsd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors/jsd/</guid><description>Configure Jira Service Desk Webhook Connector You can configure a webhook connector in the Alert Logic console to send notifications to Jira Service Desk in near real time. When you set up a notification and subscribe a webhook connector, the connector sends the event to the target URL you configured and generates a service desk request in Jira Service Desk automatically.
Alert Logic notifications alert you to threats, changes, and scheduled events in your environment so you can respond quickly.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors/manage-connectors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors/manage-connectors/</guid><description>Manage Connectors The Connectors page, listed under Configure in the Alert Logic console, offers a consolidated view of your connectors to third-party applications. The list includes all connectors created in your account. You can create and manage connectors of all types from this page.
Connectors increase efficiency and reduce response times. You can subscribe them to receive security notifications or generate service tickets automatically. For more information about connectors, see Webhook and Email Connectors.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors/observation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors/observation/</guid><description>Observation Schema You can refer to this observation schema to configure the payload template for a third-party webhook connector.
Alert Logic generates an observation when it detects an occurrence of a log correlation rule. For more information, see Correlations and Notifications.
Schema JSON
| 1 | { | | 2 | &amp;ldquo;fields&amp;rdquo;: { | | 3 | &amp;ldquo;authority&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 4 | &amp;ldquo;class&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 5 | &amp;ldquo;confidence&amp;rdquo;: number, | | 6 | &amp;ldquo;desc&amp;rdquo;: &amp;ldquo;string, | | 7 | &amp;ldquo;end_ts&amp;rdquo;: number, | | 8 | &amp;ldquo;ingest_id&amp;rdquo;: &amp;ldquo;binary&amp;rdquo;, | | 9 | &amp;ldquo;ingest_ts&amp;rdquo;: number, | | 10 | &amp;ldquo;keys&amp;rdquo;: { | | 11 | &amp;ldquo;message&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 12 | &amp;ldquo;time_recv&amp;rdquo;: number | | 13 | }, | | 14 | &amp;ldquo;parents&amp;rdquo;: [ | | 15 | &amp;ldquo;string&amp;rdquo; | | 16 | ], | | 17 | &amp;ldquo;path&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 18 | &amp;ldquo;properties&amp;rdquo;: {}, | | 19 | &amp;ldquo;recommendations&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 20 | &amp;ldquo;severity&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 21 | &amp;ldquo;start_ts&amp;rdquo;: number, | | 22 | &amp;ldquo;subclass&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 23 | &amp;ldquo;summary&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 24 | &amp;ldquo;tactic&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 25 | &amp;ldquo;technique&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 26 | &amp;ldquo;ts&amp;rdquo;: number, | | 27 | &amp;ldquo;visibility&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 28 | }, | | 29 | &amp;ldquo;id&amp;rdquo;: { | | 30 | &amp;ldquo;account&amp;rdquo;: number, | | 31 | &amp;ldquo;aid&amp;rdquo;: number, | | 32 | &amp;ldquo;msgid&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 33 | }, | | 34 | &amp;ldquo;extra&amp;rdquo;: { | | 35 | &amp;ldquo;customer_name&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 36 | &amp;ldquo;observation_description&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 37 | &amp;ldquo;correlation_rule_id&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 38 | &amp;ldquo;correlation_rule_name&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 39 | &amp;ldquo;observation_id&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 40 | &amp;ldquo;deployment_name&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 41 | &amp;ldquo;tld&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 42 | } | | 43 | } |</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors/pagerduty/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors/pagerduty/</guid><description>Configure PagerDuty Webhook Connector You can configure a webhook connector in the Alert Logic console to send notifications to PagerDuty in near real time. When you set up a notification and subscribe a webhook connector, the connector sends the event to the target URL you configured and creates a message in PagerDuty automatically.
Alert Logic notifications alert you to threats, changes, and scheduled events in your environment so you can respond quickly.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors/payloads/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors/payloads/</guid><description>Alert Logic Payloads You can use the following annotated payload JSON to customize the payload templates for third-party webhook connectors.
Incident JSON payload Observation JSON payload Scheduled Report JSON payload Scheduled FIM Search JSON payload Incident JSON payload This code is the incident JSON that Alert Logic generates. Configure your webhook payload template using the JSON output and descriptions below:
Old Incident JSON
| 1 | { | | 2 | &amp;ldquo;accountId&amp;rdquo;: 68530684, | | 3 | &amp;ldquo;all_assets&amp;rdquo;: [], | | 4 | &amp;ldquo;apex&amp;rdquo;: true, | | 5 | &amp;ldquo;appliance_info&amp;rdquo;: [], | | 6 | &amp;ldquo;appliance_ip_set&amp;rdquo;: [ | | 7 | { | | 8 | &amp;ldquo;appliance_id&amp;rdquo;: &amp;ldquo;2EEBAFAF-88DF-1005-ADBA-005056B03F5C&amp;rdquo;, | | 9 | &amp;ldquo;match_host_uuid&amp;rdquo;: false, | | 10 | &amp;ldquo;private_ips&amp;rdquo;: [ | | 11 | &amp;ldquo;172.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors/scheduled-report-notification-payload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors/scheduled-report-notification-payload/</guid><description>Scheduled Report Notification Schema You can refer to this scheduled report notification schema to configure the payload template for a third-party webhook connector.
Schema JSON
| 1 | { | | 2 | &amp;ldquo;type&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 3 | &amp;ldquo;status&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 4 | &amp;ldquo;scheduled_time&amp;rdquo;: number, | | 5 | &amp;ldquo;schedule_id&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 6 | &amp;ldquo;schedule&amp;rdquo;: { | | 7 | &amp;ldquo;daily&amp;rdquo;: { | | 8 | &amp;ldquo;hour&amp;rdquo;: number, | | 9 | &amp;ldquo;minute&amp;rdquo;: number | | 10 | } | | 11 | }, | | 12 | &amp;ldquo;run_once&amp;rdquo;: boolean, | | 13 | &amp;ldquo;published&amp;rdquo;: boolean, | | 14 | &amp;ldquo;publish_result&amp;rdquo;: { | | 15 | &amp;ldquo;timestamp&amp;rdquo;: number, | | 16 | &amp;ldquo;status&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 17 | }, | | 18 | &amp;ldquo;notify_behavior&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 19 | &amp;ldquo;name&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 20 | &amp;ldquo;modified&amp;rdquo;: { | | 21 | &amp;ldquo;by&amp;rdquo;: string, | | 22 | &amp;ldquo;at&amp;rdquo;: number | | 23 | }, | | 24 | &amp;ldquo;id&amp;rdquo;: string, | | 25 | &amp;ldquo;delete_empty_result&amp;rdquo;: boolean, | | 26 | }, | | 27 | &amp;ldquo;created&amp;rdquo;: { | | 28 | &amp;ldquo;by&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 29 | &amp;ldquo;at&amp;rdquo;: number | | 30 | }, | | 31 | &amp;ldquo;artifact_data&amp;rdquo;: { | | 32 | &amp;ldquo;result_id&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 33 | &amp;ldquo;result_count&amp;rdquo;: number, | | 34 | &amp;ldquo;metadata&amp;rdquo;: { | | 35 | &amp;ldquo;scheduled_report_name&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 36 | &amp;ldquo;schedule_id&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 37 | &amp;ldquo;result_count&amp;rdquo;: number, | | 38 | &amp;ldquo;report_type&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 39 | &amp;ldquo;report_id&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 40 | &amp;ldquo;report_description&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 41 | &amp;ldquo;customer_name&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 42 | &amp;ldquo;cadence&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 43 | &amp;ldquo;artifact_create_date&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 44 | }, | | 45 | &amp;ldquo;create_time&amp;rdquo;: number, | | 46 | &amp;ldquo;attachments&amp;rdquo;: [ | | 47 | { | | 48 | &amp;ldquo;url&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 49 | &amp;ldquo;name&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 50 | } | | 51 | ] | | 52 | }, | | 53 | &amp;ldquo;account_id&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 54 | &amp;ldquo;extra&amp;rdquo;: { | | 55 | &amp;ldquo;tld&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 56 | &amp;ldquo;ui_url&amp;rdquo;: &amp;ldquo;string&amp;rdquo;, | | 57 | &amp;ldquo;download_url&amp;rdquo;: &amp;ldquo;string&amp;rdquo; | | 58 | } | | 59 | } |</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors/servicenow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors/servicenow/</guid><description>Configure ServiceNow Webhook Connector You can configure a webhook connector in the Alert Logic console to send notifications to ServiceNow in near real time. When you set up a notification and subscribe a webhook connector, the connector sends the event to the target URL you configured and generates a service ticket in ServiceNow automatically.
Alert Logic notifications alert you to threats, changes, and scheduled events in your environment so you can respond quickly.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors/slack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors/slack/</guid><description>Configure Slack Webhook Connector You can configure a webhook connector in the Alert Logic console to send notifications to Slack in near real time. When you set up a notification and subscribe a webhook connector, the connector sends the event to the target URL you configured and creates a message in Slack automatically.
Alert Logic notifications alert you to threats, changes, and scheduled events in your environment so you can respond quickly.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors/teams/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors/teams/</guid><description>Configure Microsoft Teams Webhook Connector You can configure a webhook connector in the Alert Logic console to send notifications to Microsoft Teams in near real time. When you set up a notification and subscribe a webhook connector, the connector sends the event to the target URL you configured and creates a message in Microsoft Teams automatically.
Alert Logic notifications alert you to threats, changes, and scheduled events in your environment so you can respond quickly.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors/webhooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors/webhooks/</guid><description>Configure a Universal Webhook Connector You can configure a universal webhook connector in the Alert Logic console to send notifications to any public-facing HTTP endpoint. Connectors allow you to send data directly to a third-party application in near real time. When you set up a notification and subscribe a webhook connector, the connector sends the event to the target URL you configured and can generate a message or service ticket automatically.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/connectors/zscratch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/connectors/zscratch/</guid><description>Notes/scraps
Language for app-specific: prepopulated with required information, predefined content
Major questions that need to be socialized in the next scrum of scrums:
Are we doing the base64 encoding for the Authorization header or do we need it to already be encoded for us by the customer? It would be friendlier and likely result in fewer support calls if we handle the encoding. Preferred approach is to add fields to get the needed components, and then we should build the Authorization header.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/extended-endpoint-protection/apply-override/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/extended-endpoint-protection/apply-override/</guid><description>Apply an Override Alert Logic Extended Endpoint Protection uses a combination of machine-learning attribute analysis and dynamic behavior analysis to identify and block malware. If Alert Logic blocks a program that you want to approve, you can apply an override. Overrides prevent a protection indicator from blocking a specific file path or file hash.
Manage overrides When you create an override, you add an exception to the protection logic. This exception operates on either the file path or the file hash level, which depends on when Alert Logic blocked the program.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/extended-endpoint-protection/configure-pop-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/extended-endpoint-protection/configure-pop-up/</guid><description>Configure the Extended Endpoint Protection Pop-up When Extended Endpoint Protection blocks an attack, it triggers a pop-up message to alert the endpoint user. If you are an account administrator, you can configure this pop-up to show your company logo and custom text or you can leave it with the Alert Logic branding.
If you do not configure the pop-up message, the default message with Alert Logic branding will appear for endpoint users.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/extended-endpoint-protection/manage-endpoints/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/extended-endpoint-protection/manage-endpoints/</guid><description>Manage Endpoints All your endpoints are listed on the Endpoints page. To access the page, click the Configure menu item, click Endpoints, and then click the Endpoints tab. The list includes all active endpoints, archived endpoints, and endpoints that had the agent uninstalled.
Add endpoints Click the ADD ENDPOINTS button to download the Alert Logic Extended Endpoint Protection installer. Follow the instructions here to install: Deploy Alert Logic Extended Endpoint Protection</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/extended-endpoint-protection/uninstall-endpoint/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/extended-endpoint-protection/uninstall-endpoint/</guid><description>Uninstall Alert Logic Extended Endpoint Protection You can uninstall Extended Endpoint Protection like most Windows software programs, or you can disable it to temporarily stop the service.
Retrieve logs If you plan to contact Support about behavior of Extended Endpoint Protection on a particular machine, Alert Logic recommends that you save the logs from the endpoint. You can collect the logs and then uninstall Extended Endpoint Protection.
Use the Extended Endpoint Protection log collector (.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/file-integrity-monitoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/file-integrity-monitoring/</guid><description>File Integrity Monitoring Alert Logic offers File Integrity Monitoring (FIM), which allows you to monitor changes to files and directories of assets associated with your Alert Logic deployments in the Alert Logic console. You can configure monitoring or exclusions for specific file paths or entire directories in your Windows and Linux systems.
The File Integrity Monitoring Dashboard is only offered to Managed Detection and Response Professional customers. To learn more about Alert Logic subscriptions, see Get Started with Alert Logic Subscriptions and Add-ons.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/g-suite-log-collector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/g-suite-log-collector/</guid><description>Configure G Suite Log Collector The Alert Logic G Suite collector is an AWS-based API Poll (PAWS) log collector library mechanism designed to collect logs. You must complete tasks in G Suite and Google Cloud Platform, and then finish the configuration process in the Alert Logic console. The Alert Logic G Suite collector can collect from these specific G Suite applications:
Login Admin Access Transparency Calendar Drive Google Plus Token Groups Groups Enterprise Mobile Rules User Accounts A single Alert Logic G Suite collector can collect logs from any or all the content streams that you configure in the Alert Logic console.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/google-cloud-platform-log-collector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/google-cloud-platform-log-collector/</guid><description>Configure Google Cloud Platform Log Collector The Alert Logic Google Cloud Platform collector is an AWS-based API Poll (PAWS) log collector library mechanism designed to collect logs from the Google Cloud logs, formerly referred to as Stackdriver. You must generate a Google API, apply the permissions, and then complete the configuration process in the Alert Logic console.
Google Cloud logs do not have host metadata and are formatted in JSON. If you want to collect syslogs, you must use the Alert Logic agent to allow Alert Logic to process them.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/inline-waf/basics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/inline-waf/basics/</guid><description>Alert Logic Managed Web Application Firewall (WAF) Basics Alert Logic Managed Web Application Firewall (WAF) is a web server protection that actively blocks attacks on your web servers.
**To access WAF in the **Alert Logic console:
In the Alert Logic console, enter your credentials. Click the Configure menu item, and then click WAF. You can check the operational status of the Alert LogicWAF in the Service Status page in the Alert Logic console.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/inline-waf/bring-website-inline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/inline-waf/bring-website-inline/</guid><description>Bring Your Website Inline You can deploy Alert Logic Managed Web Application Firewall (WAF) in one of two deployment modes: reverse proxy and routing proxy. The deployment mode you select determines how traffic passes through WAF.
Understanding a proxy-based structure In both deployment modes, WAF deploys as a proxy device. When WAF protects a website, traffic to that website passes through WAF before it reaches the backend web server. WAF is represented as the web server to the client while WAF is represented as the client to the web servers.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/inline-waf/configure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/inline-waf/configure/</guid><description>Configure Alert Logic Managed Web Application Firewall (WAF) When you access the Alert Logic Managed Web Application Firewall (WAF) interface the first time, you must add your websites and test the website proxy. After you configure and test your websites, the test attack registers in the deny log.
Add a website Open the Add Website page In the Alert Logic console, click the Configure menu item, click WAF, and then click the Appliances tab.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/inline-waf/geoip-blocking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/inline-waf/geoip-blocking/</guid><description>Geo IP Blocking Alert Logic provides Geo IP blocking to restrict access to your website from certain regions based on the geographic location of the incoming request. The Alert Logic Managed Web Application Firewall (WAF) product checks incoming IP addresses against a blacklist or whitelist account, and determines whether to approve or deny access to the request. You can configure which countries you want WAF to block.
To access the Geo IP blocking option:</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/inline-waf/manage-certificates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/inline-waf/manage-certificates/</guid><description>Manage Your SSL Certificates When you create an SSL website, Alert Logic Managed Web Application Firewall (WAF) gives this website a temporary SSL certificate. You are able to substitute the temporary certificate with a signed certificate. These actions are only intended for SSL enabled website proxies. To create an SSL website, see Add a website. For more information about configuring a website, see Configure Alert Logic Managed Web Application Firewall (WAF).</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/inline-waf/manual/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/inline-waf/manual/</guid><description>Alert Logic Managed Web Application Firewall (WAF) Manual The Alert Logic Managed Web Application Firewall (WAF) documentation includes the following chapters. Click on the link to go to the corresponding chapter to learn more:
About Alert Logic Managed Web Application Firewall (WAF) Get Started with Alert Logic Managed Web Application Firewall (WAF) Dashboards Services WAF Application Delivery Controller (ADC) Learning Log Reports System Network Deployment Frequently Asked Questions Alert Logic Managed Web Application Firewall (WAF) Release Notes List of Figures</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/inline-waf/preserve-ip-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/inline-waf/preserve-ip-address/</guid><description>Preserve the Client IP Address HTTP requests often pass through one or more proxy servers before they reach the endpoint web server, which changes the source IP address for the request. As a result, endpoint web servers cannot rely on the source IP from the network connection (socket) to be the IP address of the original request. For this reason, you may want to use one of two options to preserve the original client IP address: X-Forwarded-For (XFF), or transparent proxy.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/inline-waf/proxy-protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/inline-waf/proxy-protocol/</guid><description>Proxy Protocol Alert Logic allows you to enable proxy protocol, which is designed to safely transport connection information without losing any information. Enabling proxy protocol allows Alert Logic Managed Web Application Firewall (WAF) to work with multiple layers of NAT or TCP proxy protocols, does not require infrastructure changes, has no impact on NAT firewalls, and is scalable.
Enabling proxy protocol on the WAF is not necessary unless you are configuring both communicating endpoints.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/integrate-guard-duty-findings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/integrate-guard-duty-findings/</guid><description>Integrate Amazon GuardDuty Findings into Alert Logic Incidents Amazon GuardDuty is a continuous security monitoring service that requires no customer-managed hardware or software. GuardDuty analyzes and processes VPC Flow Logs and AWS CloudTrail event logs. GuardDuty uses security logic and AWS usage statistics techniques to identify unexpected and potentially unauthorized and malicious activity, like escalations of privileges, uses of exposed credentials, or communication with malicious IPs, URLs, or domains.
Alert Logic provides a CloudFormation template that deploys a CloudWatch Events collector and a Lambda function that integrates GuardDuty findings into the Alert Logic console for display as threats on the Incidents page.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/log-management-flat-file-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/log-management-flat-file-policy/</guid><description>Log Management Flat File Policy Flat File log messages are a common log message format that can be collected, stored, and normalized similarly to Windows event log messages and syslog messages. A Flat File policy allows you to collect Flat Files for Alert Logic to review.
Alert Logic also allows you to create other types of Log Management policies. These policies dictate how Alert Logic collects log messages, and allows you to reuse this common configuration for several log sources of the same type.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/log-management-policies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/log-management-policies/</guid><description>Log Management Policies Alert Logic allows you to create four types of Log Management policies in the Alert Logic console. These policies dictate how Alert Logic collects log messages, and allows you to reuse this common configuration for several log sources of the same type.
Flat File policy: Allows you to collect flat file messages. This is a common log message format for web servers and other server software. For more information about Flat File policies, see Log Management Flat File Policy.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/log-management-policiesa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/log-management-policiesa/</guid><description>Log Management Policies Alert Logic allows you to create four types of Log Management policies. These policies dictate how Alert Logic collects log messages, and allows you to reuse this common configuration for several log sources of the same type.
Flat File policy allows you to collect flat file messages. This is a common log message format for web servers and other server software. Syslog policy allows you to collect syslog messages, which are a way for network devices to send event messages to a logging server – usually known as a syslog server.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/log-management-s3-policies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/log-management-s3-policies/</guid><description>Log Management S3 Policies S3 collection policies set the guidelines for collecting Amazon Simple Storage Service (S3) access logs, which provide details about a single access request, such as the requester, bucket name, request time, request action, response status, and any error codes. S3 policies allow you to collect S3 logs for Alert Logic to review.
Alert Logic also allows you to create other types of Log Management policies. These policies dictate how Alert Logic collects log messages, and allows you to reuse this common configuration for several log sources of the same type.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/log-management-syslog-policies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/log-management-syslog-policies/</guid><description>Log Management Syslog Policies Syslog policies allow you to collect syslog messages, which are a way for network devices to send event messages to a logging server—usually known as a syslog server.
Alert Logic also allows you to create other types of Log Management policies. These policies dictate how Alert Logic collects log messages, and allows you to reuse this common configuration for several log sources of the same type. To learn more about other log management policies, see the link below:</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/log-management-windows-event-policies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/log-management-windows-event-policies/</guid><description>Log Management Windows Event Log Policies Windows Event log files track significant events on a Windows server. A Windows event log policy allows you to collect event log files for Alert Logic to review.
Windows event log policies collect many types of logs, including:
Program errors User logins PowerShell logs Network information Alert Logic also allows you to create other types of Log Management policies. These policies dictate how Alert Logic collects log messages, and allows you to reuse this common configuration for several log sources of the same type.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/notifications/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/notifications/</guid><description>Notifications Alert Logic notifications alert you to threats, changes, and scheduled events in your environment so you can respond quickly. From the Alert Logic console, you can subscribe to:
Alert-based notifications —Security incident and log correlation notifications, for example, that alert you to potential threats in near real time Scheduled action notifications —Notifications for the completion of a scheduled activity, such as the generation of a compliance report When configuring your alert-based notifications, you can specify the criteria you want to focus on, such as threat levels in the high and critical categories.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/notifications/correlation-examples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/notifications/correlation-examples/</guid><description>Examples of Correlation Queries and Setup The following examples illustrate common log correlation queries. You can copy the search and projection statements into the WHERE and SELECT fields in the Log Search page as shown below, and then substitute log message objects with your own to create correlation queries relevant to your organization and its security goals. For more information about working in the Log Search page, see Search: Log Messages.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/notifications/exposure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/notifications/exposure/</guid><description>Exposure Notifications Source material:
From the first zoom meeting: https://zoom.us/rec/play/tZR8Juj7pjM3GIbHtQSDBfdxW9S0LKis0nJM-KZemka2V3hQYVCmMrpEYetCZPM7nJcrOY0tET0KUDPM
Discussion around 57:00. Won&amp;rsquo;t be included in initial go live.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/notifications/fim-search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/notifications/fim-search/</guid><description>File Integrity Monitoring Search Notification Alert Logic offers File Integrity Monitoring (FIM), which allows you to monitor changes to files and directories of assets associated with your Alert Logic deployments in the Alert Logic console. You can configure monitoring or exclusions for specific file paths or entire directories in your Windows and Linux systems. To learn more about FIM, see File Integrity Monitoring .
You can also view the File Integrity Monitoring dashboard for a summary of your file monitoring activity.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/notifications/health/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/notifications/health/</guid><description>Health Notifications Health notifications can alert you, subscribed users, or a configured connector when an agent, appliance, or API collector is collecting data or offline (unhealthy).
Collection assets that have been configured for less than 1 hour are excluded from health notifications. ## Key concepts
Health exposures: Health exposures result from configuration or connection problems that disrupt access to Alert Logic product capabilities by interrupting the ability to collect information from your environment.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/notifications/incident/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/notifications/incident/</guid><description>Incident Notifications The Notifications feature in the Alert Logic console can alert you, other subscribed users, or a configured connector (such as a webhook) when incidents that meet specific criteria occur.
For example, you can subscribe recipients to receive email notifications about escalated incidents for a single account or all incidents in all the managed accounts of a partner, or all high and critical incidents in the production deployment of a managed account.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/notifications/log-correlation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/notifications/log-correlation/</guid><description>Correlations and Notifications You can create a log correlation policy in the Alert Logic console and then receive a notification if a log message, or a combination of log messages, meets the correlation conditions. Correlations help you detect security weaknesses or threats for further investigation and response by allowing you to define custom logic to meet the specific security needs of your company or the accounts you manage.
You can configure Alert Logic to do either of the following in near real time when log messages meet the correlation conditions:</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/notifications/log-search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/notifications/log-search/</guid><description>Log Search Notification Use cases from wiki:
As a Security Analyst, I can schedule, receive and manage notification on the completion of Saved Searches, including sending these notifications to other members of my team. As a customer who created a scheduled search, I want to receive notifications when the search is completed and notify other members of my department. As an AWP Analyst who create a scheduled search for my customers, I want to receive notifications when the search is completed with its results and notify my customer&amp;rsquo;s contacts as well.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/notifications/manage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/notifications/manage/</guid><description>Manage Notifications The Notifications page, listed under Manage in the Alert Logic console, offers a consolidated view of your notifications. The list includes all notifications created in your account. You can create, view, and manage notifications of all types from this page.
The main panel on the right summarizes your notifications and organizes them in these tabs:
Alert Notifications —Lists alert-based notifications such as incidents and log correlation observations. You can create a notification, and you can filter and search the list.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/notifications/observation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/notifications/observation/</guid><description>Observation Notifications When a log correlation occurs that meets specific criteria, Alert Logic can send you, other subscribed users, or a configured connector (such as a webhook) an observation notification.
For more information about the Notifications feature in the Alert Logic console, see Notifications and Manage Notifications.
Create an observation notification When you create a correlation, you can set up a notification in the next step. You can also add notifications to a correlation at any time.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/notifications/report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/notifications/report/</guid><description>Scheduled Reports and Notifications You can schedule an Alert Logic report to run periodically and receive an email notification when the report is generated. If you need to generate a compliance report on a regular schedule, for example, you can schedule the report and then receive the report or a confirmation that the report generated successfully. Scheduled reports also offer Alert Logic partners a way to generate reports regularly and deliver them to their customers.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/office365-new-log-collector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/office365-new-log-collector/</guid><description>Configure Microsoft Office 365 Log Collector The instructions in this document are for a new setup of the Microsoft Office 365 log collector. For instructions on how to update Office 365 log collection by using the Alert Logic console, see Update to the new collector. If you need to reference instructions or information for the older setup of the log collector, see Set Up Collection of Microsoft Office 365 Logs.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/orphaned-agents/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/orphaned-agents/</guid><description>Avoid orphaning agents and appliances An orphaned agent or appliance is an asset that can no longer protect or be protected because critical configuration variables are missing. An orphaned agent or appliance often manifests after a user deletes a network, subnet, or deployment. This is also difficult to self-diagnose because these assets are not visible in the asset model due to this condition.
The following highlights common scenarios and solutions that can help address orphaned assets if you suspect you may have them in your environment.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/pci-scan-dispute/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/pci-scan-dispute/</guid><description>PCI Scan Disputes A PCI scan will sometimes report findings that you may want to dispute. For example, if a scan identifies a false positive vulnerability. Other examples of when you may want to dispute findings in the PCI scan results are the following:
Vulnerability has a disputed CVSS Base score. Vulnerability cannot be addressed in your environment, but there is a compensating control in place. Exceptions exist in the report.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/pci-scans-snippet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/pci-scans-snippet/</guid><description>The Payment Card Industry Data Security Standard (PCI DSS) Audit reports provide available documentation and compliance artifacts that help you demonstrate compliance with requirements of the PCI DSS.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/pci-scans/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/pci-scans/</guid><description>Manage PCI Scans Through the Alert Logic console, you can schedule quarterly external scans that are required for Payment Card Industry (PCI) compliance. You can quickly and easily view the results of those scans in the Alert Logic console, and then work with Alert Logic, as needed, to resolve vulnerabilities and prove compliance to auditors.
Working with PCI compliance requires documents available from the PCI Security Standards Council (PCI SSC). Documents include the Payment Card Industry Data Security Standard (DSS) and the current release of the ASV Program Guide.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/salesforce-log-collector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/salesforce-log-collector/</guid><description>Configure Salesforce Log Collector The Alert Logic Salesforce Collector is an AWS-based API Poll (PAWS) log collector library mechanism designed to collect logs from the Salesforce Customer relationship management (CRM) platform. You must complete a few tasks in the Salesforce platform, install the Salesforce collector using the Alert Logic CloudFormation template, and then complete the configuration process in the Alert Logic console to collect logs. You can find Salesforce logs collected with keyword search in the Alert Logic console.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/schedule-log-collection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/schedule-log-collection/</guid><description>Log Management Collection Schedules When you create a Log Management policy for the first time, you can create collection schedules. Collection schedules allow you to black out periods when you do not need to collect log sources. You can create new collection schedules for a policy at any time. However, you cannot delete or update existing schedules.
For more information about policy creation, see Log Management Policies.
To access the Log Management collection schedules, click Configure, click Log Management, and then click Policies.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/system-logs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/system-logs/</guid><description>System Logs for Syslog Collection The System Logs page allows you to configure system log (syslog) collection. Syslog messages are a way for network devices to send event messages to a logging server—usually known as a syslog server. The syslog collection configuration in the Alert Logic console is a streamlined workflow to collect messages from Linux system logs, Linux remote system logs, and Windows event logs.
The syslog collection instances govern how Alert Logic collects log messages, using tag and topology-based asset scoping.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/wla-access-log-configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/wla-access-log-configuration/</guid><description>Web Log Analytics (WLA) Access Configuration Alert Logic offers a log-based application attack detection solution. WLA is a combination of the anomaly detection, ActiveRules signatures, and advance correlation to provide coverage for most of the Open Web Application Security Project (OWASP) Top 10. WLA allows your organization to save on resources infrastructure, reduce the need for tuning, and provides almost no false-positives from the machine-learning based analysis and detection engine.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/wla-configuration-copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/wla-configuration-copy/</guid><description>Web Log Analytics (WLA) Configuration Alert Logic Web Log Analytics (WLA) is a log-based application attack detection solution that protects your web applications from common application vulnerabilities. WLA reduces the need for tuning and minimizes false-positives using the combination of a machine learning-based analysis and detection engine and signatures. To learn more about WLA, see About Alert Logic Web Log Analytics (WLA).
Alert Logic generates incidents detected from WLA in the Incidents page.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/wla-configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/wla-configuration/</guid><description>Web Log Analytics (WLA) Configuration Alert Logic Web Log Analytics (WLA) is a log-based application attack detection solution that protects your web applications from common application vulnerabilities. WLA reduces the need for tuning and minimizes false-positives using the combination of a machine learning-based analysis and detection engine and signatures. To learn more about WLA, see About Alert Logic Web Log Analytics (WLA).
Alert Logic generates incidents detected from WLA in the Incidents page.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/wsm5-aws-autoscaling-upgrade-cloudformation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/wsm5-aws-autoscaling-upgrade-cloudformation/</guid><description>Web Security Manager AWS V5 Auto Scaling Upgrade with CloudFormation Template Web Security Manager must upgrade auto scaling to version 5 in the AWS console. Alert Logic no longer supports CentOS version 6. This requires you to upgrade your Web Security Manager auto scaling for AWS to the latest operating version. This document provides instructions for customers who want to create a new CloudFormation template. For instructions on how to upgrade with an existing CloudFormation template, see Web Security Manager AWS V5 Auto Scaling Upgrade with an Existing Stack.</description></item><item><title/><link>https://richg-github.github.io/docs.github.io/configure/wsm5-aws-autoscaling-upgrade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://richg-github.github.io/docs.github.io/configure/wsm5-aws-autoscaling-upgrade/</guid><description>Web Security Manager AWS V5 Auto Scaling Upgrade with an Existing Stack Web Security Manager must upgrade auto scaling to version 5 in the AWS console. Alert Logic no longer supports CentOS version 6. This requires you to upgrade your Web Security Manager auto scaling for AWS to the latest operating version. This document provides instructions for customers who want to update an existing CloudFormation template. For instructions on how to upgrade with a new CloudFormation template, see Web Security Manager AWS V5 Auto Scaling Upgrade with CloudFormation Template.</description></item></channel></rss>